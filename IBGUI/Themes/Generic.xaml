<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:local="clr-namespace:IBGUI" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:ee="http://schemas.microsoft.com/expression/2010/effects" mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/IBGUI;component/ResourceDictionaries.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="IBFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Stroke="{DynamicResource IBFocusBorderBrush}" StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IBFocusVisual_Non">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:IBTabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBTabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TabPanel Grid.Row="0" Margin="0" x:Name="HeaderPanel" Background="Transparent" IsItemsHost="True" Panel.ZIndex="102" KeyboardNavigation.TabIndex="1"/>

                        <Border Grid.Row="1" x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"/>
                        </Border>

                        <Rectangle x:Name="IBPosRect" Grid.RowSpan="2" Visibility="Collapsed" Fill="{DynamicResource IBSelectedBrush}" Panel.ZIndex="100" Opacity="0.39" Grid.Row="0"/>
                        <Rectangle x:Name="IBMaskRect" Fill="#3FA8A8A8" Grid.RowSpan="2" Visibility="Collapsed" AllowDrop="True" Panel.ZIndex="101" Grid.Row="0"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource IBBorderBrush}"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style TargetType="{x:Type local:IBTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBTabItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border Margin="0" x:Name="Border">
                            <ContentPresenter HorizontalAlignment="Left" Margin="12,2,12,2" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header"/>
                        </Border>
                        <Rectangle x:Name="IBMaskRect" AllowDrop="True" Fill="#01000000"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBBorderBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource IBSelectedForeGroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsActivePanel" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBSelectedBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource IBSelectedForeGroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource IBFocusBrush}" TargetName="Border"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource IBForeGroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ContextMenu" Value="{DynamicResource IBTabItemCM}"/>
    </Style>

    <Style TargetType="{x:Type local:IBPageTabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBTabItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="20"/>
                        </Grid.ColumnDefinitions>
                        <Border Margin="0" x:Name="Border" d:LayoutOverrides="TopMargin, BottomMargin">
                            <ContentPresenter HorizontalAlignment="Center" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header" d:LayoutOverrides="Width" Margin="5,2"/>
                        </Border>
                        <Rectangle x:Name="IBMaskRect" AllowDrop="True" Fill="#01000000" Grid.ColumnSpan="2" d:LayoutOverrides="LeftMargin, RightMargin, TopMargin, BottomMargin"/>
                        <local:IBButton x:Name="CloseBtn" ToolTip="{DynamicResource PageEdit_Close}" Grid.Column="1" Background="{TemplateBinding Background}" Visibility="Hidden" Foreground="{TemplateBinding Foreground}"
                                        Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="15" Height="15">
                            <local:IBButton.Content>
                                <Image Source="{DynamicResource CloseIconImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18"/>
                            </local:IBButton.Content>
                        </local:IBButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="CloseBtn">
                            <Setter Property="Background" TargetName="CloseBtn" Value="{DynamicResource IBFocusBrush3_T}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True" SourceName="CloseBtn">
                            <Setter Property="Background" TargetName="CloseBtn" Value="{DynamicResource IBClickedBrush_T}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource IBFocusBrush}"/>
                            <Setter Property="Visibility" TargetName="CloseBtn" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource IBForeGroundBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IBSelectedBrush}"/>
                            <Setter Property="Visibility" TargetName="CloseBtn" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource IBBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource IBSelectedForeGroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ContextMenu" Value="{DynamicResource IBPageTabItemlCM}"/>
        <Setter Property="Height" Value="20"/>
    </Style>

    <Style TargetType="{x:Type local:IBButton}">
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource IBForeGroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnClick1">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="rectangle">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Hidden}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.50"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="grid">
                        <Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <Rectangle x:Name="rectangle" Fill="{DynamicResource IBClickedBrush}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource IBFocusBrush_T}"/>
                        </MultiTrigger>
                        <Trigger Property="MonoColorIcon" Value="True">
                            <Setter Property="Effect" TargetName="contentPresenter" Value="{DynamicResource MonoColorEffect}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush_T}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Effect" TargetName="contentPresenter" Value="{DynamicResource InvalidMonoColorEffect}"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="ButtonBase.Click">
                            <BeginStoryboard Storyboard="{StaticResource OnClick1}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:IBPanelSplitter}">
        <Style.Triggers>
            <Trigger Property="IsDropping" Value="True">
                <Setter Property="Background" Value="{DynamicResource IBFocusBrush2_T}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBPanelSplitter}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="6"/>
        <Setter Property="Height" Value="6"/>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="AllowDrop" Value="True"/>
    </Style>

    <Style TargetType="{x:Type local:IBWorkspaceFrame}">
        <Style.Triggers>
            <Trigger Property="IsDropping" Value="True">
                <Setter Property="Background" Value="{DynamicResource IBFocusBrush2_T}"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBWorkspaceFrame}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="6"/>
        <Setter Property="Height" Value="6"/>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource IBFocusBrush}"/>
        <Setter Property="AllowDrop" Value="True"/>
    </Style>

    <Style TargetType="{x:Type local:IBWindowTop}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBWindowTop}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"/>
                        <Label HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                               VerticalAlignment="Center" Margin="6,0,6,0" Padding="0" Foreground="{DynamicResource IBInactiveForeGroundBrush}"
                               Content="{Binding Title, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                        <local:IBButton x:Name="CloseBtn" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="40" ToolTip="{DynamicResource Window_CloseToolTip}">
                            <local:IBButton.Content>
                                <Image Source="{DynamicResource CloseIconImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18"/>
                            </local:IBButton.Content>
                        </local:IBButton>
                        <local:IBButton x:Name="MaxBtn" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="30" Margin="0,0,40,0" ToolTip="{DynamicResource Window_ChangeStateToolTip}">
                            <local:IBButton.Content>
                                <Image Source="{DynamicResource MaximizeIconImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18"/>
                            </local:IBButton.Content>
                        </local:IBButton>
                        <local:IBButton x:Name="MinBtn" VerticalAlignment="Stretch" HorizontalAlignment="Right" Width="30" Margin="0,0,70,0" ToolTip="{DynamicResource Window_MinimizeToolTip}">
                            <local:IBButton.Content>
                                <Image Source="{DynamicResource MinimizeIconImage}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="18" Height="18"/>
                            </local:IBButton.Content>
                        </local:IBButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
    </Style>


    <Style TargetType="{x:Type local:IBMenuSeparator}">
        <Setter Property="Height" Value="5"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBMenuSeparator}">
                    <Border BorderThickness="0" Height="5" VerticalAlignment="Top" Background="{DynamicResource IBBackGroundBrush_T}">
                        <Border BorderBrush="{DynamicResource IBBorderBrush}" BorderThickness="1" VerticalAlignment="Center" Height="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{DynamicResource IBBackGroundBrush}" >
            <Grid>
                <ContentPresenter 
					Margin="10,3" 
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center" />
                <Popup 
					x:Name="Popup"
					Placement="Bottom"
					IsOpen="{TemplateBinding IsSubmenuOpen}"
					AllowsTransparency="True" 
					Focusable="False"
					PopupAnimation="Fade">
                    <Border 
						x:Name="SubmenuBorder"
						SnapsToDevicePixels="True" >
                        <StackPanel  
							IsItemsHost="True" 
							KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBFocusBrush_T}"/>
            </Trigger>
            <Trigger Property="IsOpen" Value="True" SourceName="Popup">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBBackGroundBrush_T}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource IBInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- TopLevelItem -->
    <ControlTemplate 
		x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" >
            <Grid>
                <ContentPresenter 
					Margin="6,3" 
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background"
					Value="{DynamicResource IBBackGroundBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground"
					Value="{DynamicResource IBInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- SubmenuItem -->
    <ControlTemplate 
		x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Background="{DynamicResource IBBackGroundBrush_T}" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="32" SharedSizeGroup="Icon"/>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
					x:Name="Icon"
					ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Border 
					x:Name="Check"  
					Width="13" Height="13" 
					Visibility="Collapsed"
					Margin="6,3,6,3" 
					BorderThickness="1">
                    <Path 
						x:Name="CheckMark"
						Width="7" Height="7" 
						Visibility="Hidden" 
						SnapsToDevicePixels="False" 
						Stroke="{DynamicResource IBForeGroundBrush}"
						StrokeThickness="2"
						Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter 
					x:Name="HeaderHost"
					Grid.Column="1"
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center" Margin="0,3"/>
                <TextBlock x:Name="InputGestureText"
					Grid.Column="2"
					Text="{TemplateBinding InputGestureText}"
					Margin="23,2,0,2"
					DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBFocusBrush2_T}"/>
                <Setter Property="Foreground" Value="{DynamicResource IBSelectedForeGroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource IBInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- SubmenuHeader -->
    <ControlTemplate 
		x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" 
		TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" >
            <Grid x:Name="grid" Background="{DynamicResource IBBackGroundBrush_T}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="32" SharedSizeGroup="Icon"/>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
					x:Name="Icon"
					VerticalAlignment="Center"
					ContentSource="Icon" HorizontalAlignment="Center"/>
                <ContentPresenter 
					x:Name="HeaderHost"
					Grid.Column="1"
					ContentSource="Header"
					RecognizesAccessKey="True" VerticalAlignment="Center"/>
                <TextBlock x:Name="InputGestureText"
					Grid.Column="2"
					Text="{TemplateBinding InputGestureText}"
					Margin="5,2,2,2"
					DockPanel.Dock="Right"/>
                <Path 
					Grid.Column="3"
					HorizontalAlignment="Center"
					VerticalAlignment="Center"
					Data="M 0 0 L 0 7 L 4 3.5 Z" 
					Fill="{DynamicResource IBForeGroundBrush}" />
                <Popup 
					x:Name="Popup"
					Placement="Right" 
					IsOpen="{TemplateBinding IsSubmenuOpen}"
					AllowsTransparency="True" 
					Focusable="False"
					PopupAnimation="None" VerticalOffset="7">
                    <Border 
						x:Name="SubmenuBorder"
						SnapsToDevicePixels="True" >
                        <StackPanel  
							IsItemsHost="True" 
							KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="grid" Value="{DynamicResource IBFocusBrush2_T}"/>
                <Setter Property="Foreground" Value="{DynamicResource IBSelectedForeGroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource IBInactiveForeGroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:IBMenuItem}">
        <Setter Property="Height" Value="22"/>
        <Setter Property="Foreground" Value="{DynamicResource IBForeGroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template"
					Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:IBWorkspace}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBWorkspace}">
                    <local:IBPanel Margin="3,3,3,3" CurrentPos="center">

                        <ContentPresenter/>

                        <local:IBWorkspaceFrame HorizontalAlignment="Left" Height="Auto" Margin="-3,-3,0,3" Panel.ZIndex="114514"/>
                        <local:IBWorkspaceFrame VerticalAlignment="Top" Width="Auto" Margin="3,-3,3,0" Panel.ZIndex="114514" ThisDragAllow="False"/>
                        <local:IBWorkspaceFrame HorizontalAlignment="Right" Height="Auto" Margin="0,-3,-3,3" Panel.ZIndex="114514"/>
                        <local:IBWorkspaceFrame VerticalAlignment="Bottom" Width="Auto" Margin="3,0,3,-3" Panel.ZIndex="114514"/>

                    </local:IBPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:IBToggleButton}">
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource IBForeGroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBToggleButton}">
                    <Grid x:Name="grid">
                        <Border x:Name="border"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="6">
                            <ContentPresenter ContentSource="Content" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{DynamicResource MonoColorEffect}"/>
                        </Border>
                        <Rectangle x:Name="rectangle" Fill="{DynamicResource IBClickedBrush}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonON" Value="True">
                            <Setter Property="Background" Value="{DynamicResource IBSelectedBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ButtonON" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource IBFocusBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:IBTextBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource IBFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBTextBox}">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}">
                            <local:IBScrollViewer Padding="10,0" x:Name="PART_ContentHost" Background="{TemplateBinding Background}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="AcceptsReturn" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBFocusBrush_T}"/>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBEditableAreaBruah}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectionBrush" Value="{DynamicResource IBFocusBrush2_T}"/>
        <Setter Property="Foreground" Value="{DynamicResource IBEditableForeGroundBruah}"/>
        <Setter Property="SelectionOpacity" Value="0.6"/>
        <Setter Property="CaretBrush" Value="{DynamicResource IBSelectedBrush}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <Style TargetType="{x:Type local:IBFocusableBG}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBFocusableBG}">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="True" FocusVisualStyle="{StaticResource IBFocusVisual_Non}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
    </Style>

    <Style TargetType="{x:Type local:IBScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter x:Name="view" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"
                                                Grid.ColumnSpan="2" Grid.RowSpan="2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" CanVerticallyScroll="True" CanHorizontallyScroll="True"/>
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Orientation="Horizontal"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}"
                                   Style="{StaticResource IBScrollBarStyle}" Height="15" MinHeight="15"/>
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" x:Name="PART_VerticalScrollBar" Orientation="Vertical" 
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}"
                                   Style="{StaticResource IBScrollBarStyle}" Width="15" MinWidth="15"/>
                        <Rectangle x:Name="rectangle" Fill="{DynamicResource IBBackGroundBrush}" Height="15" Width="15" Grid.Row="1" Grid.Column="1" StrokeThickness="0" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Visibility" Value="Visible" SourceName="PART_VerticalScrollBar">
                            <Setter Property="Grid.ColumnSpan" TargetName="view" Value="1"/>
                        </Trigger>
                        <Trigger Property="Visibility" Value="Visible" SourceName="PART_HorizontalScrollBar">
                            <Setter Property="Grid.RowSpan" TargetName="view" Value="1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Visibility" Value="Visible" SourceName="PART_VerticalScrollBar"/>
                                <Condition Property="Visibility" Value="Visible" SourceName="PART_HorizontalScrollBar"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible"/>
                            <Setter Property="Grid.RowSpan" TargetName="PART_VerticalScrollBar" Value="1"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <Style TargetType="{x:Type local:IBTreeView}">
        <Setter Property="Background" Value="{DynamicResource IBEditableAreaBruah}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBTreeView}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                        <local:IBScrollViewer Focusable="False" Background="{TemplateBinding Background}" CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" Padding="{TemplateBinding Padding}"
                                              HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                            <ItemsPresenter/>
                        </local:IBScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:IBLabel}">
        <Setter Property="Foreground" Value="{DynamicResource IBForeGroundBrush}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBLabel}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource IBInactiveForeGroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type local:IBColorButton}">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBColorButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:IBTabControl2}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBTabControl2}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>


                        <UniformGrid Grid.Row="0" x:Name="HeaderPanel" Background="Transparent" IsItemsHost="True" KeyboardNavigation.TabIndex="1" Rows="1">
                            <UniformGrid.Clip>
                                <RectangleGeometry RadiusX="5" RadiusY="5" Rect="{Binding Area, RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}"/>
                            </UniformGrid.Clip>
                        </UniformGrid>
                        <Border CornerRadius="5" BorderThickness="1" BorderBrush="{DynamicResource IBBorderBrush}"/>

                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Grid.Row="1" Margin="0,3,0,0"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource IBBorderBrush}"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style TargetType="{x:Type local:IBTabItem2}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IBTabItem2}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border Margin="0" x:Name="Border">
                            <ContentPresenter HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="ContentSite" VerticalAlignment="Center" RecognizesAccessKey="True" ContentSource="Header"/>
                        </Border>
                        <Rectangle x:Name="IBMaskRect" AllowDrop="True" Fill="#01000000"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource IBDarkSelectedBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource IBSelectedBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="Selector.IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource IBFocusBrush}" TargetName="Border"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource IBBackGroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource IBForeGroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="ContextMenu" Value="{x:Null}"/>
    </Style>
</ResourceDictionary>
